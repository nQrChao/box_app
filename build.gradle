plugins {
    id 'com.android.application'
    id 'vmos-build'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.android'
}
if (project.hasProperty('MOD_SRC_DIR') && MOD_SRC_DIR.toLowerCase().contains("huawei")) {
    println "\n\033[40;36;4m--- 检测到华为渠道，应用 AppGallery Connect 插件 ---\033[0m"
    apply plugin: 'com.huawei.agconnect'
}
def keyPropertiesFile = file("../mod_common/keystore.properties")
def keyProperties = new Properties()
keyProperties.load(new FileInputStream(keyPropertiesFile))

def static buildTime() {
    return new Date().format("_yyyyMMdd.HHmm", TimeZone.getTimeZone("GMT+08:00"))
}

ext.moduleType = 'app'
apply from: '../mod_common/base.gradle'


android {
    namespace "com.zqhy.app.newproject"
    compileSdk 34
    flavorDimensions += ['version']
    defaultConfig {
        multiDexEnabled true
        minSdkVersion 21
        targetSdkVersion 31
        versionCode VERSION_CODE
        versionName VERSION_NAME
        applicationId APPLICATION_ID
        resValue "string", "app_name", MOD_APP_NAME
        resValue "string", "app_refer_name", MOD_APP_NAME

        // 使用 MOD_INFO map 中的值来设置构建字段和占位符
        buildConfigField "int", "APP_TEMPLATE", MOD_APP_OLD_TEMPLATE
        buildConfigField "String", "GAME_O_ID", MOD_GAME_O_ID
        buildConfigField "String", "GAME_O_CHANNEL_NAME", MOD_GAME_O_CHANNEL_NAME
        buildConfigField "String", "APP_FILING", MOD_APP_FILING
        buildConfigField "String", "API_VERSION", MOD_APP_API_VERSION
        buildConfigField "String", "APP_UPDATE_ID", MOD_APP_UPDATA_ID
        buildConfigField "String", "DEFAULE_CHANNEL_TGID", MOD_APP_DEFAULT_TGID
        buildConfigField "String", "AUTH_LOGIN_SIGN_INFO", MOD_APP_AUTH_LOGIN_SIGN
        buildConfigField "String", "TENCENT_APP_ID", MOD_APP_TENCENT_ID
        buildConfigField "String", "TENCENT_APP_KEY", MOD_APP_TENCENT_KEY
        buildConfigField "String", "CHANNEL_TGID", MOD_APP_DEFAULT_TGID

        buildConfigField "int", "BAIDU_APP_ID", "0"
        buildConfigField "int", "APP_DISPLAY_TYPE", "1"
        buildConfigField "Boolean", "IS_AUTOMATION_TEST", "false"
        buildConfigField "boolean", "IS_CONTAINS_TOUTIAO_SDK", "false"
        buildConfigField "boolean", "IS_CONTAINS_TOUTIAO_API", "false"
        buildConfigField "String", "WX_APP_ID", "\"\""
        buildConfigField "String", "QQ_APP_ID", "\"\""
        buildConfigField "String", "TOUTIAO_APPID", "\"\""
        buildConfigField "String", "API_DEBUG_URL", "\"\""
        buildConfigField "String", "SHENMA_APPID", "\"\""
        buildConfigField "String", "BAIDU_APP_KEY", "\"\""
        buildConfigField "String", "KUAISHOU_APP_ID", "\"\""
        buildConfigField "String", "KUAISHOU_APP_NAME", "\"\""
        buildConfigField "String", "DOUYIN_CLIENT_KEY", "\"aw5n9d0uwo3eaplx\""
        buildConfigField "Boolean", "IS_CHANGE_TRANSACTION", "false" //修改交易临时包 2021-09-17
        buildConfigField "Boolean", "IS_HAS_VISITORS", "true" //不同意隐私协议之后是否有访客模式 2022-09-29
        buildConfigField "Boolean", "NEED_RECOMMENDATION_SWITCH", "false" //是否包含个性化推荐 2023-02-13
        buildConfigField "Boolean", "GET_PERMISSIONS_FIRSR", "false" //是否同意协议后直接申请权限 2023-05-26
        buildConfigField "Boolean", "SHOW_ROOKIES_DIALOG", "true" //显示新人弹窗  2023-10-08
        buildConfigField "Boolean", "IS_REPORT", "false" //是否为投放包(需要屏蔽掉交易，小号回收)  2023-10-09
        buildConfigField "Boolean", "IS_RETURN_REPORT", "false" //是否为回归上报注册（回归用户登录上报为注册）2023-12-07
        buildConfigField "Boolean", "NEED_BIPARTITION", "false" //是否屏蔽双开，云游，加速（头条包审核需求） 2024—08-30
        buildConfigField "Boolean", "IS_ALLOW_PRIVATE_DIALOG_REFUSE", "true"//是否允许隐私弹窗出现拒绝选项
        buildConfigField "Boolean", "IS_NEED_PRIVACY_AGREEMENT", "true"
        buildConfigField "Boolean", "IS_DOWNLOAD_GAME_FIRST", "false" //这个是先登录后下载
        buildConfigField "Boolean", "IS_SHOW_ABOUT_US", "false"

        manifestPlaceholders = [
                'app_name'      : MOD_APP_NAME,
                'app_icon'      : MOD_APP_ICON,
                "O_APP_ID"      : MOD_GAME_O_ID,
                "O_APP_KEY"     : MOD_GAME_O_KEY,
                "O_APP_SECRET"  : MOD_GAME_O_SECRET,
                GETUI_APPID     : "voTGye7Tna61voN23yibE",
                GETUI_APP_KEY   : "ANBlPWQZ2V9XVkPggmsZYA",
                GETUI_APP_SECRET: "bBinkHVZ2T6Kj48GdJV9S3",
                APPLOG_SCHEME   : "rangersapplog.byAx6uYt".toLowerCase(),
                tencentScheme   : "tencent",
        ]

        // 打印开关
        buildConfigField('boolean', 'LOG_ENABLE', '' + LOG_ENABLE + '')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // 动态创建一个与名称同名的 signingConfig
        "$MOD_SIGNING_NAME" {
            storeFile file(KEY_PROPERTIES["${MOD_SIGNING_NAME}_storeFile"])
            keyAlias KEY_PROPERTIES["${MOD_SIGNING_NAME}_keyAlias"]
            keyPassword KEY_PROPERTIES["${MOD_SIGNING_NAME}_keyPassword"]
            storePassword KEY_PROPERTIES["${MOD_SIGNING_NAME}_storePassword"]
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    packagingOptions {
        // 明确告诉 Gradle 优先选择第一个遇到的同名文件
        pickFirst 'lib/arm64-v8a/libijkplayer.so'
        pickFirst 'lib/armeabi/libijkplayer.so'
        pickFirst 'lib/armeabi-v7a/libijkplayer.so'
        pickFirst 'lib/x86/libijkplayer.so'
        pickFirst 'lib/x86_64/libijkplayer.so'

        // 如果 libijkffmpeg.so 也存在冲突，同样加上
        pickFirst 'lib/arm64-v8a/libijkffmpeg.so'
        pickFirst 'lib/armeabi-v7a/libijkffmpeg.so'
        pickFirst 'lib/armeabi/libijkffmpeg.so'
        pickFirst 'lib/x86/libijkffmpeg.so'
        pickFirst 'lib/x86_64/libijkffmpeg.so'

        pickFirst 'lib/arm64-v8a/libijksdl.so'
        pickFirst 'lib/armeabi/libijksdl.so'
        pickFirst 'lib/armeabi-v7a/libijksdl.so'
        pickFirst 'lib/x86/libijksdl.so'
        pickFirst 'lib/x86_64/libijksdl.so'

        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/x86/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip "*/x86_64/*.so"
        doNotStrip "armeabi.so"

    }

    applicationVariants.configureEach { variant ->
        // apk 输出文件名配置
        variant.outputs.configureEach { output ->
            outputFileName = variant.buildType.name + '_'
            outputFileName += MOD_APP_DEFAULT_TGID.replace("\"", "") + "_"
            outputFileName += applicationId + '_'
            outputFileName += MOD_APP_UPDATA_ID.replace("\"", "") + "_v"
            outputFileName += VERSION_CODE + "_"
            outputFileName += versionName.concat(buildTime())
            outputFileName += '.apk'
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
            }
            signingConfig signingConfigs."$MOD_SIGNING_NAME"
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
            }
            signingConfig signingConfigs."$MOD_SIGNING_NAME"
        }
    }

    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res/layouts/activity',
                            'src/main/res/layouts/aop',
                            'src/main/res/layouts/fragment',
                            'src/main/res/layouts/layout',
                            'src/main/res/layouts/common',
                            'src/main/res/layouts/dialog',
                            'src/main/res/layouts/listitem',
                            'src/main/res/layouts/other',
                            'src/main/res/layouts/tab',
                            'src/main/res/layouts/audit',
                            'src/main/res/layouts/audit2',
                            'src/main/res/layouts',
                            'src/main/res'
                    ]
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
        checkReleaseBuilds false
    }

    // 避免打包aapt错误。比如png格式图片错误
    aaptOptions {
        cruncherEnabled = false
    }

    repositories {
        maven {
            url = uri("libs")
        }
    }


    productFlavors {
        mainApp {

        }
    }
}

// 快捷命令映射
tasks.register('buildDebug') {
    dependsOn 'assembleDebug'
    group = 'build'
    description = '仅生成调试包'
}

tasks.register('buildRelease') {
    dependsOn 'assembleRelease'
    group = 'build'
    description = '仅生成正式包'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    if (MOD_HAS_VIDEO == false) {

    }
    implementation libs.google.gson
    implementation libs.google.material
    implementation libs.google.exoplayer

    implementation libs.blankj.utilcode

    implementation libs.flycotablayout.lib
    implementation libs.umeng.common// 必选
    implementation libs.umeng.asms// 必选

    implementation libs.youth.banner
    implementation libs.androidx.fragment
    //2024.03.15 一键登录 阿里云新版
    implementation files('libs/main-2.2.3-release.aar')
    implementation files('libs/logger-2.2.2-release.aar')
    implementation files('libs/auth_number_product-2.14.14-log-online-standard-cuum-release.aar')
    implementation project(':mod_common')

}


